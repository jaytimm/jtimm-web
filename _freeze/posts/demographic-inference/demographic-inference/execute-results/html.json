{
  "hash": "005e803c4262c8b4a5124c9764aa9b94",
  "result": {
    "markdown": "---\ntitle: \"twitter users, demographic inference & reticulate \"\ndescription: \"Implementing M3 for demographic inference\"\ndate: \"2022-06-10\"\ncategories: [python, twitter, demographics]\n  \nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    \nbibliography: /home/jtimm/pCloudDrive/GitHub/jtimm_web/biblio.bib\n\nimage: demographic-inference.png\n---\n\n\n\n\n> A simple code-through for using the Python library [m3inference](https://github.com/euagendas/m3inference) in R via `reticulate`. As described in @wang2019demographic. Library facilitates demographic attribute inference of Twitter users, namely, gender, age, and organizational status, based on profile images, screen names, names, and biographies. \n\n\n\n## Reticulate & Python \n\nFirst, we build a conda environment (via the terminal) comprised of `m3inference` and `pip` (and their respective dependencies).\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n## <TERMINAL>\nconda create -n m3demo\nsource activate m3demo\nconda install pip \n/home/jtimm/anaconda3/envs/m3demo/bin/pip install m3inference\n```\n:::\n\n\n\n\nThen we establish Python and conda environment paths.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## <R-console>\nSys.setenv(RETICULATE_PYTHON = \"/home/jtimm/anaconda3/envs/m3demo/bin/python\")\n\nlibrary(reticulate)\n#reticulate::use_python(\"/home/jtimm/anaconda3/envs/m3demo/bin/python\")\nreticulate::use_condaenv(condaenv = \"m3demo\",\n                         conda = \"/home/jtimm/anaconda3/bin/conda\")\n```\n:::\n\n\n\n\n## Twitter data\n\nFor demonstration purposes, we identify/extract my Twitter followers (and some of their M3-relevant features) using the `rtweet` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## <R-console>\nlibrary(tidyverse)\nfws  <- rtweet::get_followers(user = 'DrJayTimm') \n\nusers <- rtweet::lookup_users(fws$user_id) %>%\n  select(user_id, name, screen_name, description, profile_image_url)\n```\n:::\n\n\n\n\nBelow is a simple hack to provide the M3 model with an actual image file for Twitter profiles that lack profile pics.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## <R-console>\njk <- 'http://abs.twimg.com/sticky/default_profile_images/default_profile_normal.png'\njk0 <- 'https://twirpz.files.wordpress.com/2015/06/twitter-avi-gender-balanced-figure.png'\n\ndir0 <- tempdir()\n\nusers2 <- users %>%\n  mutate(profile_image_url = ifelse(profile_image_url == jk, jk0, profile_image_url)) %>%\n  rename(id_str = user_id) \n```\n:::\n\n\n\n\n\n## Profile pics via M3\n\nOutput Twitter user details to local temp directory as a ~ `ndjson` file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## <R-console>\ntmp2 <- tempfile()\njsonlite::stream_out(users2, file(tmp1 <- tempfile()), verbose = F)\n```\n:::\n\n\n\n\nIn a Python console, we then import the `M3Twitter` module, and set the directory in which Twitter profile pics will be stored.  (Note that the directory established in the R chunk above is accessed below via the `r.` prefix.)\n\n\n::: {.cell}\n\n```{.python .cell-code}\n## <PYTHON-console>\nfrom m3inference import M3Twitter\nm3twitter = M3Twitter(cache_dir = r.dir0) \n```\n:::\n\n\n\n\nThen, via the `transform_jsonl` function, we restructure the `ndjson`/`jsonl` file and download Twitter users' profile pics to the temp directory. This function also identifies description language.  Note: While we can download profile images and identify description language in R, things tend to go much more smoothly (& quicker) using the functionality included in `m3inference`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n## <PYTHON-console>\nm3twitter.transform_jsonl(input_file = r.tmp1, \n                          output_file = r.tmp2, \n                          img_path_key = \"profile_image_url\")#, \n                          #lang_key = \"lang\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/home/jtimm/anaconda3/envs/m3demo/lib/python3.10/site-packages/PIL/Image.py:992: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  warnings.warn(\n```\n:::\n:::\n\n\n\n\n## Deomgraphic inference via M3\n\nApply M3 classification model.  Attribute classes:  \n\n* Gender: `male`, `female`;  \n\n* Age: `<= 18`, `19-29`, `30-39`, `>=40`; and\n\n* Organization: `non-org`, `is-org`.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n## <PYTHON-console>\nfrom m3inference import M3Inference\nm3 = M3Inference() \npred = m3.infer(r.tmp2)\n```\n:::\n\n\n\n\n### Accessing classifications\n\nOutput/predictions from the Python-based M3 model can be moved into R via the (R-based) `reticulate::py` function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## <R-console>\npy_predictions <- reticulate::py$pred\n```\n:::\n\n\n\nThe table below details age-gender-organization inferences by Twitter ID for a small subset of my followers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## <R-console>\ndf <- reshape2::melt(py_predictions) \ndf0 <- data.table::setDT(df)[, .SD[which.max(value)], by = list(L1, L2)]\ndf1 <- data.table::dcast(df0, L1  ~ L2, value.var = 'L3')\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## <R-console>\ndf1 %>% sample_n(10) %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n|id                  |age   |gender |org     |\n|:-------------------|:-----|:------|:-------|\n|3294608261          |>=40  |male   |non-org |\n|159724355           |>=40  |male   |non-org |\n|1373105712          |19-29 |male   |non-org |\n|712116930782433284  |30-39 |female |non-org |\n|14933875            |>=40  |male   |non-org |\n|586304056           |30-39 |male   |non-org |\n|1139150461599195137 |19-29 |male   |non-org |\n|477371410           |<=18  |male   |non-org |\n|46111691            |>=40  |female |non-org |\n|734578981954031616  |>=40  |female |is-org  |\n:::\n:::\n\n\n\n\n### Demographic summary\n\n\n#### By Organization\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(df1$org)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n is-org non-org \n     16     159 \n```\n:::\n:::\n\n\n\n\n#### By Age & Gender \n\n(for followers that have not been classified as organizations):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## <R-console>\ndf2 <- df1 %>%\n  mutate(age = factor(age, levels = c('<=18', '19-29', '30-39', '>=40'))) %>%\n  filter(org != 'is-org') %>%\n  count(gender, age) %>%\n  mutate(percent = round(n/sum(n)*100,1)) %>%\n  mutate(percent = ifelse(gender == \"male\", percent*-1, percent))\n\ndf2 %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n|gender |age   |  n| percent|\n|:------|:-----|--:|-------:|\n|female |19-29 | 12|     7.5|\n|female |30-39 |  5|     3.1|\n|female |>=40  | 23|    14.5|\n|male   |<=18  |  6|    -3.8|\n|male   |19-29 | 32|   -20.1|\n|male   |30-39 | 25|   -15.7|\n|male   |>=40  | 56|   -35.2|\n:::\n:::\n\n\n\n### Age-Gender \"pyramid\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## <R-console>\nmaxs <- max(abs(df2$percent))\ndf2 %>%\n  ggplot(aes(x = age, y = percent, fill =gender)) +\n  geom_col(alpha = .75) + \n  ylim(-maxs - 1, maxs + 1) +\n  coord_flip() +\n  ggthemes::scale_fill_stata() +\n  # scale_y_continuous(breaks = c(-5, 0, 5),\n  #                    labels = c(\"5%\", \"0%\", \"5%\")) +\n  labs(title=\"Inferred age-gender demographics of my followers\")\n```\n\n::: {.cell-output-display}\n![](demographic-inference_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n## Profile pics & demographic inference\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## <R-console>\nusers2$paths <- grep('224x224', dir(dir0, full.names = TRUE), value = T)\n\nusers3 <- users2 %>%\n  arrange(id_str) %>%\n  mutate(paths = grep('224x224', dir(dir0, full.names = TRUE), value = T)) %>%\n  left_join(df1, by = c('id_str' = 'id'))\n```\n:::\n\n\n\n\n**A simple function** for modifying profile pics. Including: (1) \"charcoal-ing\" photos for user privacy, and (2) labeling photos with predicted age, gender, and organization classes.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## <R-console>\nmodify_images <- function(paths){\n  \n  for(i in 1:length(paths)){\n    y1 <- magick::image_read(paths[i])\n    y2 <- magick::image_charcoal(y1)\n    y3 <- magick::image_border(y2, 'white', '5x5')\n    \n    ll <- paste0(users3$org[i], '\\n',\n                 users3$gender[i], '\\n',\n                 users3$age[i])\n    \n    y4 <- magick::image_annotate(y3, \n                                 text = ll, \n                                 color = \"black\", \n                                 size = 26,\n                                 weight = 700,\n                                 location = \"+10+10\")\n        \n    magick::image_write(y4, paths[i]) \n    }\n}\n```\n:::\n\n\n\n\n**Apply function**, and build a collage of profile pics with predicted demographics using the [photomoe](https://github.com/jaytimm/photomoe) package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## <R-console>\nmodify_images(paths = users3$paths)\n\n# devtools::install_github(\"jaytimm/photomoe\")\nphotomoe::img_build_collage(paths = users3$paths, \n                            dimx = 7, \n                            dimy = 12)\n```\n\n::: {.cell-output-display}\n![](demographic-inference_files/figure-html/unnamed-chunk-19-1.png){width=100%}\n:::\n:::\n",
    "supporting": [
      "demographic-inference_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}